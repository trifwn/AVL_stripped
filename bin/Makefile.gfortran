#
# Makefile for AVL3.40 using GNU gfortran
# H.Youngren, S.Allmaras 2/24/22
#

BINDIR = .
#BINDIR = /home/codes/bin/
INSTALLCMD = install -s

SRC = ../src

PROGS = avl
AOBJS = avl.o aoper.o amode.o amass.o asetup.o \
amake.o ainput.o aoutput.o aoutmrf.o aero.o atrim.o atpforc.o \
aic.o cdcl.o airutil.o autil.o aoml.o \
limits.o \
hidden.o \
userio.o getvm.o \
spline.o sgutil.o \
stubs.o \
second.o

# Original generic matrix solver (slow but self-contained)
#MATRIX = matrix.o
#MLIBS =

# Use the lapack solver for faster matrix solves
MATRIX = matrix-lapack.o
# This requires AVL to be linked with the lapack and blas libraries
MLIBS = -llapack -lblas
# Alternatively link with the very fast Intel Math Kernel Library
#MLIBS = -lmkl

# Other libraries needed
EIGOBJ = ../eispack/libeispack.a

###================================================
###  Default compilers and flags
FC = f77
FFLAGS = -O
DP =
DBG =
LFLG =


FTNLIB =
#Subroutine SECOND source file
SECOND = second_g77.f

##--------------------------

# Uncomment flags for desired machine...


##--------------------------
### Intel Fortran Compiler
#FC = ifort
#OPT = -O
##OPT = -O0 -g
#ACHK =
#SECOND = second_ifc.f
#FTNLIB = -Vaxlib
#EIGOBJ = ../eispack/libeispack.a
#DP =
##--------------------------
### double-precision (also need double precision eispack)
#DP = -r8
#FFLAGS = $(OPT) $(ACHK) $(DP)


##---------------------------------------
##  Uncomment for gfortran
FC = gfortran
OPT = -O
DP =
ACHK =

SECOND = second_g77.f

# gfortran array mismatch fix - if needed add to FFLAGS
GFIX =
#GFIX = -fallow-argument-mismatch

# debug
#OPT = -O0
#DBG= -g
#ACHK = -fbounds-check -finit-real=inf
#ACHK = -fbounds-check -finit-real=inf -ffpe-trap=invalid,zero,denormal

EIGOBJ = ../eispack/libeispack.a

##--------------------------
# double precision
#DP = -fdefault-real-8
##--------------------------

# use -m32 for 32-bit binary, -m64 for 64-bit (check your system!)
#FFLAGS = $(OPT) -m32 $(ACHK) $(DP) $(DBG)
FFLAGS = $(OPT) -m64 $(ACHK) $(DP) $(DBG)
# to make static executable
#LFLG = -static
##---------------------------------------



all:	 $(PROGS)

install: $(PROGS)
	$(INSTALLCMD) $(PROGS) $(BINDIR)

clean:
	-/bin/rm $(PROGS)
	-/bin/rm *.o

$(SRC)/AVL.INC: $(SRC)/AINDEX.INC
	touch $(SRC)/AVL.INC

avl: $(AOBJS) $(MATRIX)
	$(FC) -o avl $(AOBJS) $(MATRIX) $(ALIBS) $(MLIBS) $(EIGOBJ) $(FTNLIB) $(LFLG)
	$(INSTALLCMD) avl $(BINDIR)

dtest: dtest.o
	$(FC) -o dtest dtest.o $(LFLG)

avl.o: $(SRC)/avl.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/avl.f
aoper.o: $(SRC)/aoper.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/aoper.f
amode.o: $(SRC)/amode.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/amode.f
amass.o: $(SRC)/amass.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/amass.f
asetup.o: $(SRC)/asetup.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/asetup.f
cdcl.o: $(SRC)/cdcl.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS)  $(SRC)/cdcl.f
amake.o: $(SRC)/amake.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/amake.f
ainput.o: $(SRC)/ainput.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/ainput.f
aoutput.o: $(SRC)/aoutput.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/aoutput.f
aoutmrf.o: $(SRC)/aoutmrf.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/aoutmrf.f
aero.o: $(SRC)/aero.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/aero.f
getvm.o: $(SRC)/getvm.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/getvm.f
atrim.o: $(SRC)/atrim.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/atrim.f
atpforc.o: $(SRC)/atpforc.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/atpforc.f
aoml.o: $(SRC)/aoml.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/aoml.f

limits.o: $(SRC)/limits.f $(SRC)/AVL.INC
	$(FC) -c $(FFLAGS) $(SRC)/limits.f

hidden.o: $(SRC)/hidden.f
	$(FC) -c $(FFLAGS) $(SRC)/hidden.f
matrix.o: $(SRC)/matrix.f
	$(FC) -c $(FFLAGS)  $(SRC)/matrix.f
matrix-lapack.o: $(SRC)/matrix-lapack.f
	$(FC) -c $(FFLAGS)  $(SRC)/matrix-lapack.f
matrix-lapackdp.o: $(SRC)/matrix-lapackdp.f
	$(FC) -c $(FFLAGS)  $(SRC)/matrix-lapackdp.f

aic.o: $(SRC)/aic.f
	$(FC) -c $(FFLAGS) $(SRC)/aic.f
userio.o: $(SRC)/userio.f
	$(FC) -c $(FFLAGS) $(SRC)/userio.f


spline.o: $(SRC)/spline.f
	$(FC) -c $(FFLAGS)  $(SRC)/spline.f
sgutil.o: $(SRC)/sgutil.f
	$(FC) -c $(FFLAGS)  $(SRC)/sgutil.f
airutil.o: $(SRC)/airutil.f
	$(FC) -c $(FFLAGS)  $(SRC)/airutil.f
autil.o: $(SRC)/autil.f
	$(FC) -c $(FFLAGS)  $(SRC)/autil.f

stubs.o: $(SRC)/stubs.f
	$(FC) -c $(FFLAGS) $(SRC)/stubs.f

dtest.o: $(SRC)/dtest.f
	$(FC) -c $(FFLAGS) $(SRC)/dtest.f

second.o: $(SRC)/$(SECOND)
	cp $(SRC)/$(SECOND) $(SRC)/second.f
	$(FC) -c $(FFLAGS) $(SRC)/second.f
